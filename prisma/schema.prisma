// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PhoneModel {
  iPhonex
  iPhone11
  iPhone12
  iPhone13
  iPhone14
  iPhone15
}

enum CaseMaterial {
  silicone
  polycarbonate
}

enum CaseFinish {
  smooth
  textured
}

enum CaseColor {
  black
  blue
  rose
  yellow
}

enum TshirtSize {
  small
  medium
  large
  xlarge
}

enum TshirtColor {
  white
  black
  red
  blue
  green
}

enum MugColor {
  white
  black
  blue
  red
  green
}

enum ProductType {
  phoneCase
  tshirt
  mug
}

model Configuration {
  id   String       @id @default(auto()) @map("_id") @db.ObjectId
  type ProductType?

  imageUrl        String
  width           Int
  height          Int
  casecolor       CaseColor?
  casemodel       PhoneModel?
  casematerial    CaseMaterial?
  casefinish      CaseFinish?
  size            TshirtSize?
  tshirtColor     TshirtColor?
  mugColor        MugColor?
  croppedImageUrl String?
  basePrice       Float?
  totalPrice      Float?
  Order           Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  waiting
  in_cargo
  delivered
}

model Order {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  configurationId String        @db.ObjectId
  configuration   Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  userId          String
  amount          Float
  isPaid          Boolean       @default(false)
  paidType        String
  status          OrderStatus   @default(waiting)
  address         Address       @relation(fields: [addressId], references: [id])
  addressId       String        @db.ObjectId
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([configurationId])
  @@index([addressId])
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
